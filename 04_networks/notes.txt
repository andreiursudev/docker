Out of the box, containers can send requests to the World Wide Web.
You can communicate with web API's and web pages from inside your dockerized applications.
You don't need any special setup or any changes to your code, this code just works.
Sending this HTTP request from inside the dockerized application works.
It works just as it worked without containers and without Docker.

You need to replace local hosts with a special domain, which is understood by Docker and that's host.docker.internal.
This special domain is recognized by Docker. It's understood by Docker.
And it's translated to the IP address off your host machine as seen from inside the Docker container.
And you can use this anywhere where you need a domain, where you need a URL.

Communication between containers can be maid if we inspect a container and find its ip address and use the ip address
in the other container.

Create networks using
docker network create favorites-net
docker run -d --name mongodb --network favourites-net mongo

If two containers are part of the same network, you can just put the other containers instead of the ip address.

Docker Network Drivers
Docker Networks actually support different kinds of "Drivers" which influence the behavior of the Network.
The default driver is the "bridge" driver - it provides the behavior shown in this module (i.e. Containers can find each other by name if they are in the same Network).
The driver can be set when a Network is created, simply by adding the --driver option.
docker network create --driver bridge my-net
Of course, if you want to use the "bridge" driver, you can simply omit the entire option since "bridge" is the default anyways.
Docker also supports these alternative drivers - though you will use the "bridge" driver in most cases:
host: For standalone containers, isolation between container and host system is removed (i.e. they share localhost as a network)
overlay: Multiple Docker daemons (i.e. Docker running on different machines) are able to connect with each other. Only works in "Swarm" mode which is a dated / almost deprecated way of connecting multiple containers
macvlan: You can set a custom MAC address to a container - this address can then be used for communication with that container
none: All networking is disabled.
Third-party plugins: You can install third-party plugins which then may add all kinds of behaviors and functionalities
As mentioned, the "bridge" driver makes most sense in the vast majority of scenarios.
