#Imperative approach
docker build -t kub-first-app .

kubectl --help

kubectl create

#image in not found inside k8s cluster
kubectl create deployment first-app --image=kub-first-app

kubectl get deployments

kubectl get pods

kubectl delete deployment first-app

#publish image to docker hub
docker tag kub-first-app andreiursudev/kub-first-app

docker push andreiursudev/kub-first-app

kubectl create deployment first-app --image=andreiursudev/kub-first-app

kubectl get deployments

kubectl get pods

#ClusterIP is actually the default type which basically means it will only be reachable from inside the cluster.
kubectl expose deployment first-app --type=ClusterIP --port=8080

#NodePort means this deployment should be exposed with help off the IP address of the worker node on which it's running
kubectl expose deployment first-app --type=NodePort --port=8080

#LoadBalancer utilizes a LoadBalancer which has to exist in the infrastructure on which our cluster runs.
#And then this LoadBalancer will actually generate a unique address for this service.
#And it will not just do that, but as the name implies, it will also evenly distribute incoming traffic across all pods, which are part of this service.
kubectl expose deployment first-app --type=LoadBalancer --port=8080

kubectl get services

#Minikube has a command,  which will give us access to the service by basically mapping a special port to an IP
#which we can reach from our local machine,  and which identifies this virtual machine running on our local machine
minikube service first-app


#Kubernates waits longer and longer to restart a pod to prevent infinite loops in case an application fails each time.


kubectl scale deployment/first-app --replicas=3

#afer a change in code
docker build -t andreiursudev/kub-first-app .

docker push andreiursudev/kub-first-app

kubectl set image deployment/first-app kub-first-app=andreiursudev/kub-first-app

#used tag to update new image to k8s
kubectl set image deployment/first-app kub-first-app=andreiursudev/kub-first-app:2

kubectl rollout status deployment/first-app
deployment "first-app" successfully rolled out

kubectl rollout undo deployment/first-app

kubectl rollout history deployment/first-app --revision=3

kubectl rollout undo deployment/first-app --to-revision=1

kubectl delete service first-app

kubectl delete deployment first-app

#Declarative approach
kubectl apply -f=deployment.yaml

kubectl delete -f=deployment.yaml
